[{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://wanglabcsu.github.io/blit/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://wanglabcsu.github.io/blit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yun Peng. Author, maintainer. Shixiang Wang. Author. Jia Ding. Contributor. Jennifer Lu. Copyright holder.           Author included scripts Kraken2 KrakenTools libraries Li Song. Copyright holder.           Author included scripts TRUST4 library X. Shirley Liu. Copyright holder.           Author included scripts TRUST4 library","code":""},{"path":"https://wanglabcsu.github.io/blit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peng Y, Wang S (2025). blit: Bioinformatics Library Integrated Tools. R package version 0.2.0.9000, https://github.com/WangLabCSU/blit.","code":"@Manual{,   title = {blit: Bioinformatics Library for Integrated Tools},   author = {Yun Peng and Shixiang Wang},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://github.com/WangLabCSU/blit}, }"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"blit-bioinformatics-library-for-integrated-tools-","dir":"","previous_headings":"","what":"Bioinformatics Library for Integrated Tools","title":"Bioinformatics Library for Integrated Tools","text":"goal blit make easy execute command line tool R.","code":""},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bioinformatics Library for Integrated Tools","text":"can install blit CRAN using: Alternatively, install development version GitHub :","code":"install.packages(\"blit\") # install.packages(\"remotes\") remotes::install_github(\"WangLabCSU/blit\")"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bioinformatics Library for Integrated Tools","text":"","code":"library(blit)"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"execute-command","dir":"","previous_headings":"Example","what":"Execute command","title":"Bioinformatics Library for Integrated Tools","text":"build command, simply use exec. first argument command name, can also provide full path. , pass command parameters. create command object: run command, just pass command object cmd_run() (Note: stdout = \"|\" always used vignette ensure standard output can captured knitr.) Alternatively, can run background. case, process object returned. information, refer official site: use tricks capture output background process. actual implementation README.Rmd differs, output remains . cmd_background() provided completeness. Instead using function, recommend using cmd_parallel(), can run multiple commands background ensuring processes properly cleaned process exits.","code":"exec(\"echo\", \"$PATH\") #> <Execute: echo> Sys.setenv(TEST = \"blit is awesome\") exec(\"echo\", \"$TEST\") |> cmd_run(stdout = \"|\") #> Running command (2025-04-08 05:58:19): echo $TEST #>  #> blit is awesome #> Running scheduled exit task #> Command process finished #> System command succeed proc <- exec(\"echo\", \"$TEST\") |> cmd_background(stdout = \"\") proc$kill() Sys.unsetenv(\"TEST\") #> Running command (2025-04-08 05:58:19): echo $TEST #> blit is awesome # ip address are copied from quora <What are some famous IP addresses?>: https://qr.ae/pYlnbQ address <- c(\"localhost\", \"208.67.222.222\", \"8.8.8.8\", \"8.8.4.4\") cmd_parallel(     !!!lapply(address, function(ip) exec(\"ping\", ip)),     stdouts = TRUE,     stdout_callbacks = lapply(         seq_len(4),         function(i) {             force(i)             function(text, proc) {                 sprintf(\"Connection %d: %s\", i, text)             }         }     ),     timeouts = 4, # terminate after 4s     threads = 4 ) #> Running command (2025-04-08 05:58:19): ping localhost #> Running command (2025-04-08 05:58:19): ping 208.67.222.222 #> Running command (2025-04-08 05:58:19): ping 8.8.8.8 #> Running command (2025-04-08 05:58:19): ping 8.8.4.4 #>  #> Connection 1: PING localhost (::1) 56 data bytes #> Connection 1: 64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.017 ms #> ⠙ 0/4 [0/s] [elapsed in 76ms] @ 2025-04-08 05:58:19 #> ⠹ 0/4 [0/s] [elapsed in 290ms] @ 2025-04-08 05:58:20 #> ⠸ 0/4 [0/s] [elapsed in 500ms] @ 2025-04-08 05:58:20 #> ⠼ 0/4 [0/s] [elapsed in 710ms] @ 2025-04-08 05:58:20 #> ⠴ 0/4 [0/s] [elapsed in 929ms] @ 2025-04-08 05:58:20 #> ⠦ 0/4 [0/s] [elapsed in 1.1s] @ 2025-04-08 05:58:20 #> ⠧ 0/4 [0/s] [elapsed in 1.4s] @ 2025-04-08 05:58:21 #> ⠇ 0/4 [0/s] [elapsed in 1.6s] @ 2025-04-08 05:58:21 #> Connection 1: 64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.042 ms #> ⠏ 0/4 [0/s] [elapsed in 1.6s] @ 2025-04-08 05:58:21 #> ⠋ 0/4 [0/s] [elapsed in 1.8s] @ 2025-04-08 05:58:21 #> ⠙ 0/4 [0/s] [elapsed in 2s] @ 2025-04-08 05:58:21 #> ⠹ 0/4 [0/s] [elapsed in 2.2s] @ 2025-04-08 05:58:22 #> Connection 1: 64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.040 ms #> ⠸ 0/4 [0/s] [elapsed in 2.2s] @ 2025-04-08 05:58:22 #> ⠼ 0/4 [0/s] [elapsed in 2.4s] @ 2025-04-08 05:58:22 #> ⠴ 0/4 [0/s] [elapsed in 2.6s] @ 2025-04-08 05:58:22 #> ⠦ 0/4 [0/s] [elapsed in 2.8s] @ 2025-04-08 05:58:22 #> ⠧ 0/4 [0/s] [elapsed in 3s] @ 2025-04-08 05:58:22 #> ⠇ 0/4 [0/s] [elapsed in 3.3s] @ 2025-04-08 05:58:23 #> ⠏ 0/4 [0/s] [elapsed in 3.5s] @ 2025-04-08 05:58:23 #> ⠋ 0/4 [0/s] [elapsed in 3.7s] @ 2025-04-08 05:58:23 #> Connection 1: 64 bytes from localhost (::1): icmp_seq=4 ttl=64 time=0.039 ms #> ⠙ 0/4 [0/s] [elapsed in 3.7s] @ 2025-04-08 05:58:23 #> ⠹ 0/4 [0/s] [elapsed in 3.9s] @ 2025-04-08 05:58:23 #> ⠸ 0/4 [0/s] [elapsed in 4.1s] @ 2025-04-08 05:58:23 #> ⠼ 0/4 [0/s] [elapsed in 4.1s] @ 2025-04-08 05:58:23 #> Running scheduled exit task #> Command process finished #> Running scheduled exit task #> Command process finished #> Running scheduled exit task #> Command process finished #> Running scheduled exit task #> Command process finished #> ⠼ 4/4 [0.96/s] [elapsed in 4.2s] @ 2025-04-08 05:58:23 #> Warning: [Command: 1] System command timed out in 4 secs (status: -9) #> Warning: [Command: 2] System command timed out in 4.1 secs (status: -9) #> Warning: [Command: 3] System command timed out in 4.1 secs (status: -9) #> Warning: [Command: 4] System command timed out in 4.1 secs (status: -9)"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"environment-context","dir":"","previous_headings":"Example","what":"Environment context","title":"Bioinformatics Library for Integrated Tools","text":"blit package provides several functions manage control environment context: cmd_wd: define working directory. cmd_envvar: define environment variables. cmd_envpath: define PATH-like environment variables. cmd_condaenv: define PATH environment variables conda environment. Note: echo built-command linux shell, remains available even modifying PATH environment variable. cmd_condaenv() can add conda/mamba environment prefix PATH environment variable. Conda/mamba open-source package environment management systems facilitate installation multiple software versions dependencies. allow easy switching environments compatible Linux, macOS, Windows. cmd_condaenv() function accepts multiple conda/mamba environment prefixes optional root argument specifying path conda/mamba root prefix. root provided, function searches root following order: option: blit.conda.root. environment variable: BLIT_CONDA_ROOT. root prefix [appmamba()] (Please see Software management section details). cmd_condaenv() function searches specified environment prefix within provided root path.","code":"exec(\"echo\", \"$(pwd)\") |>     cmd_wd(tempdir()) |>     cmd_run(stdout = \"|\") #> Working Directory: '/tmp/Rtmp2bxDJx' #> Running command (2025-04-08 05:58:24): echo $(pwd) #>  #> /tmp/Rtmp2bxDJx #> Running scheduled exit task #> Command process finished #> System command succeed exec(\"echo\", \"$TEST\") |>     cmd_envvar(TEST = \"blit is very awesome\") |>     cmd_run(stdout = \"|\") #> Setting environment variables: TEST #> Running command (2025-04-08 05:58:24): echo $TEST #>  #> blit is very awesome #> Running scheduled exit task #> Command process finished #> System command succeed exec(\"echo\", \"$PATH\") |>     cmd_envpath(\"PATH_IS_HERE\", action = \"replace\") |>     cmd_run(stdout = \"|\") #> Setting environment variables: PATH #> Running command (2025-04-08 05:58:24): echo $PATH #>  #> PATH_IS_HERE #> Running scheduled exit task #> Command process finished #> System command succeed"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"software-management","dir":"","previous_headings":"Example","what":"Software management","title":"Bioinformatics Library for Integrated Tools","text":"blit package integrates micromamba, lightweight version mamba package manager, efficient software environment management. can install micromamba install_appmamba(). appmamba() function executes specified micromamba commands. Running without arguments shows help document: create new environment named samtools install samtools Bioconda, use: environment created, can execute commands within . following example locates samtools binary within specified environment: may want clean created environment-samtools. details, please see https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html.","code":"install_appmamba() #> Installing appmamba #> Downloading from 'https://micro.mamba.pm/api/micromamba/linux-64/latest' #> Install appmamba successfully! appmamba() #> Running command (2025-04-08 05:58:27): #> /home/runner/.local/share/R/blit/apps/appmamba/bin/micromamba --root-prefix #> /home/runner/.local/share/R/blit/appmamba --help appmamba(\"create\", \"--yes\", \"--name samtools\", \"bioconda::samtools\") #> Running command (2025-04-08 05:58:27): #> /home/runner/.local/share/R/blit/apps/appmamba/bin/micromamba --root-prefix #> /home/runner/.local/share/R/blit/appmamba create --yes --name samtools #> bioconda::samtools exec(\"which\", \"samtools\") |>     cmd_condaenv(\"samtools\") |>     cmd_run() #> Setting environment variables: PATH #> Running command (2025-04-08 05:58:39): which samtools #> Running scheduled exit task #> Command process finished #> System command succeed appmamba(\"env\", \"remove\", \"--yes\", \"--name samtools\") #> Running command (2025-04-08 05:58:39): #> /home/runner/.local/share/R/blit/apps/appmamba/bin/micromamba --root-prefix #> /home/runner/.local/share/R/blit/appmamba env remove --yes --name samtools"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"schedule-expressions","dir":"","previous_headings":"Example","what":"Schedule expressions","title":"Bioinformatics Library for Integrated Tools","text":"Several functions allow schedule expressions: cmd_on_start/cmd_on_exit: define startup, exit code command. cmd_on_succeed/cmd_on_fail: define code run command succeed fail. can also register code succeessful failure command respectively (Timeout means command fail):","code":"file <- tempfile() file.create(file) #> [1] TRUE file.exists(file) #> [1] TRUE exec(\"ping\", \"localhost\") |>     cmd_on_exit(file.remove(file)) |>     cmd_run(timeout = 5, stdout = \"|\") # terminate it after 5s #> Running command (2025-04-08 05:58:40): ping localhost #>  #> PING localhost (::1) 56 data bytes #> 64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.016 ms #> 64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.028 ms #> 64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.029 ms #> 64 bytes from localhost (::1): icmp_seq=4 ttl=64 time=0.030 ms #> 64 bytes from localhost (::1): icmp_seq=5 ttl=64 time=0.030 ms #> Running scheduled exit task #> Command process finished #> Warning: System command timed out in 5 secs (status: -9) file.exists(file) #> [1] FALSE file <- tempfile() file.create(file) #> [1] TRUE file.exists(file) #> [1] TRUE exec(\"ping\", \"localhost\") |>     cmd_on_fail(file.remove(file)) |>     cmd_run(timeout = 5, stdout = \"|\") # terminate it after 5s #> Running command (2025-04-08 05:58:45): ping localhost #>  #> PING localhost (::1) 56 data bytes #> 64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.017 ms #> 64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.029 ms #> 64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.030 ms #> 64 bytes from localhost (::1): icmp_seq=4 ttl=64 time=0.035 ms #> 64 bytes from localhost (::1): icmp_seq=5 ttl=64 time=0.027 ms #> Running the scheduled failed task #> Running scheduled exit task #> Command process finished #> Warning: System command timed out in 5 secs (status: -9) file.exists(file) #> [1] FALSE file <- tempfile() file.create(file) #> [1] TRUE file.exists(file) #> [1] TRUE exec(\"ping\", \"localhost\") |>     cmd_on_succeed(file.remove(file)) |>     cmd_run(timeout = 5, stdout = \"|\") # terminate it after 5s #> Running command (2025-04-08 05:58:50): ping localhost #>  #> PING localhost (::1) 56 data bytes #> 64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.017 ms #> 64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.029 ms #> 64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.029 ms #> 64 bytes from localhost (::1): icmp_seq=4 ttl=64 time=0.034 ms #> 64 bytes from localhost (::1): icmp_seq=5 ttl=64 time=0.029 ms #> Running scheduled exit task #> Command process finished #> Warning: System command timed out in 5 secs (status: -9) file.exists(file) # file remain exist as timeout means command failed #> [1] TRUE file.remove(file) #> [1] TRUE"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"built-in-commands","dir":"","previous_headings":"Example","what":"Built-in commands","title":"Bioinformatics Library for Integrated Tools","text":"blit provides several built-functions directly executing specific commands., include: samtools, alleleCounter, cellranger, fastq_pair, gistic2, KrakenTools, kraken2, perl, pySCENIC, python, seqkit, trust4. commands, can also use cmd_help() print help document. easily extend commands.","code":"python() |> cmd_help(stdout = \"|\") #> Running command (2025-04-08 05:58:55): /usr/bin/python --help #>  #> usage: /usr/bin/python [option] ... [-c cmd | -m mod | file | -] [arg] ... #> Options (and corresponding environment variables): #> -b     : issue warnings about converting bytes/bytearray to str and comparing #>          bytes/bytearray with str or bytes with int. (-bb: issue errors) #> -B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x #> -c cmd : program passed in as string (terminates option list) #> -d     : turn on parser debugging output (for experts only, only works on #>          debug builds); also PYTHONDEBUG=x #> -E     : ignore PYTHON* environment variables (such as PYTHONPATH) #> -h     : print this help message and exit (also -? or --help) #> -i     : inspect interactively after running script; forces a prompt even #>          if stdin does not appear to be a terminal; also PYTHONINSPECT=x #> -I     : isolate Python from the user's environment (implies -E and -s) #> -m mod : run library module as a script (terminates option list) #> -O     : remove assert and __debug__-dependent statements; add .opt-1 before #>          .pyc extension; also PYTHONOPTIMIZE=x #> -OO    : do -O changes and also discard docstrings; add .opt-2 before #>          .pyc extension #> -P     : don't prepend a potentially unsafe path to sys.path; also #>          PYTHONSAFEPATH #> -q     : don't print version and copyright messages on interactive startup #> -s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE=x #> -S     : don't imply 'import site' on initialization #> -u     : force the stdout and stderr streams to be unbuffered; #>          this option has no effect on stdin; also PYTHONUNBUFFERED=x #> -v     : verbose (trace import statements); also PYTHONVERBOSE=x #>          can be supplied multiple times to increase verbosity #> -V     : print the Python version number and exit (also --version) #>          when given twice, print more information about the build #> -W arg : warning control; arg is action:message:category:module:lineno #>          also PYTHONWARNINGS=arg #> -x     : skip first line of source, allowing use of non-Unix forms of #!cmd #> -X opt : set implementation-specific option #> --check-hash-based-pycs always|default|never: #>          control how Python invalidates hash-based .pyc files #> --help-env: print help about Python environment variables and exit #> --help-xoptions: print help about implementation-specific -X options and exit #> --help-all: print complete help information and exit #>  #> Arguments: #> file   : program read from script file #> -      : program read from stdin (default; interactive mode if a tty) #> arg ...: arguments passed to program in sys.argv[1:] #> Running scheduled exit task #> Command process finished perl() |> cmd_help(stdout = \"|\") #> Running command (2025-04-08 05:58:55): /usr/bin/perl --help #>  #>  #> Usage: /usr/bin/perl [switches] [--] [programfile] [arguments] #>   -0[octal/hexadecimal] specify record separator (\\0, if no argument) #>   -a                    autosplit mode with -n or -p (splits $_ into @F) #>   -C[number/list]       enables the listed Unicode features #>   -c                    check syntax only (runs BEGIN and CHECK blocks) #>   -d[t][:MOD]           run program under debugger or module Devel::MOD #>   -D[number/letters]    set debugging flags (argument is a bit mask or alphabets) #>   -e commandline        one line of program (several -e's allowed, omit programfile) #>   -E commandline        like -e, but enables all optional features #>   -f                    don't do $sitelib/sitecustomize.pl at startup #>   -F/pattern/           split() pattern for -a switch (//'s are optional) #>   -g                    read all input in one go (slurp), rather than line-by-line (alias for -0777) #>   -i[extension]         edit <> files in place (makes backup if extension supplied) #>   -Idirectory           specify @INC/#include directory (several -I's allowed) #>   -l[octnum]            enable line ending processing, specifies line terminator #>   -[mM][-]module        execute \"use/no module...\" before executing program #>   -n                    assume \"while (<>) { ... }\" loop around program #>   -p                    assume loop like -n but print line also, like sed #>   -s                    enable rudimentary parsing for switches after programfile #>   -S                    look for programfile using PATH environment variable #>   -t                    enable tainting warnings #>   -T                    enable tainting checks #>   -u                    dump core after parsing program #>   -U                    allow unsafe operations #>   -v                    print version, patchlevel and license #>   -V[:configvar]        print configuration summary (or a single Config.pm variable) #>   -w                    enable many useful warnings #>   -W                    enable all warnings #>   -x[directory]         ignore text before #!perl line (optionally cd to directory) #>   -X                    disable all warnings #>    #> Run 'perldoc perl' for more help with Perl. #> Running scheduled exit task #> Command process finished"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"pipe","dir":"","previous_headings":"Example","what":"Pipe","title":"Bioinformatics Library for Integrated Tools","text":"One great features blit ability translate R pipe (%>% |>) Linux pipe (|). functions used create command object can accept another command object. internal capture first unnamed input value. command object, removed call saved. command object run, saved command passed pipe (|) command. take gzip command example (assuming ’re using Linux system). last clean temporary files.","code":"tmpdir <- tempdir() file <- tempfile(tmpdir = tmpdir) writeLines(letters, con = file) file2 <- tempfile() exec(\"gzip\", \"-c\", file) |>     exec(\"gzip\", \"-d\", \">\", file2) |>     cmd_run(stdout = \"|\") #> Running command (2025-04-08 05:58:55): gzip -c /tmp/Rtmp2bxDJx/file1db163a56a5d #> | gzip -d > /tmp/Rtmp2bxDJx/file1db14f8f6795 #> Running scheduled exit task #> Command process finished #> System command succeed identical(readLines(file), readLines(file2)) #> [1] TRUE file.remove(file) #> [1] TRUE file.remove(file2) #> [1] TRUE"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Bioinformatics Library for Integrated Tools","text":"add new command, use make_command function. helper function designed assist developers creating functions initialize new command objects. command object bundle multiple Command R6 objects (note uppercase \"C\" Command, distinguishes command object) associated running environment (including working directory environment variables). make_command function accepts function initializes new Command object , necessary, validates input arguments. core purpose create new Command R6 object, familiarity R6 class system essential. several private methods fields may want override creating new Command R6 object. first method command_locate, determines locate command path. default, attempt use cmd argument provided user. cmd argument supplied, try locate command using alias method. cases, need provide values alias method, rather overriding command_locate method. example, consider ping command. can define : command-line tools, input parameters always characters. core principle Command object convert R objects (data frames) characters—typically file paths R objects saved disk.","code":"Ping <- R6::R6Class(     \"Ping\",     inherit = Command,     private = list(alias = function() \"ping\") ) ping <- make_command(\"ping\", function(..., ping = NULL) {     Ping$new(cmd = ping, ...) }) ping(\"8.8.8.8\") |> cmd_run(timeout = 5, stdout = \"|\") # terminate it after 5s #> Running command (2025-04-08 05:58:55): /usr/bin/ping 8.8.8.8 #> Running scheduled exit task #> Command process finished #> Warning: System command timed out in 5 secs (status: -9)"},{"path":"https://wanglabcsu.github.io/blit/index.html","id":"session-informations","dir":"","previous_headings":"","what":"Session Informations","title":"Bioinformatics Library for Integrated Tools","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] blit_0.2.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     R6_2.6.1          fastmap_1.2.0     xfun_0.52         #>  [5] knitr_1.50        parallel_4.4.3    htmltools_0.5.8.1 rmarkdown_2.29    #>  [9] ps_1.9.0          cli_3.6.4         processx_3.8.6    data.table_1.17.0 #> [13] compiler_4.4.3    tools_4.4.3       evaluate_1.0.3    yaml_2.3.10       #> [17] rlang_1.1.5"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class to prepare command parameters. — Command","title":"R6 Class to prepare command parameters. — Command","text":"Command R6 class used developers create new command. used end users.","code":""},{"path":[]},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class to prepare command parameters. — Command","text":"Command$new() Command$build_command() Command$get_on_start() Command$get_on_exit() Command$get_on_fail() Command$get_on_succeed() Command$print() Command$clone()","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class to prepare command parameters. — Command","text":"Create new Command object.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$new(...)"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class to prepare command parameters. — Command","text":"... Additional argument passed command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-build-command-","dir":"Reference","previous_headings":"","what":"Method build_command()","title":"R6 Class to prepare command parameters. — Command","text":"Build command line","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$build_command(help = FALSE, verbose = TRUE)"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class to prepare command parameters. — Command","text":"help boolean value indicating whether build parameters help document . verbose boolean value indicating whether command execution verbose. envir environment used Execute command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"atomic character combine command parameters.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-get-on-start-","dir":"Reference","previous_headings":"","what":"Method get_on_start()","title":"R6 Class to prepare command parameters. — Command","text":"Get command startup code","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$get_on_start()"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"list quosures.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-get-on-exit-","dir":"Reference","previous_headings":"","what":"Method get_on_exit()","title":"R6 Class to prepare command parameters. — Command","text":"Get command exit code","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$get_on_exit()"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"list quosures.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-get-on-fail-","dir":"Reference","previous_headings":"","what":"Method get_on_fail()","title":"R6 Class to prepare command parameters. — Command","text":"Get command failure code","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$get_on_fail()"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"list quosures.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-get-on-succeed-","dir":"Reference","previous_headings":"","what":"Method get_on_succeed()","title":"R6 Class to prepare command parameters. — Command","text":"Get command succeessful code","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$get_on_succeed()"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"list quosures.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"R6 Class to prepare command parameters. — Command","text":"Build parameters run command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$print(indent = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class to prepare command parameters. — Command","text":"indent single integer number giving space indent.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class to prepare command parameters. — Command","text":"object .","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class to prepare command parameters. — Command","text":"objects class cloneable method.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class to prepare command parameters. — Command","text":"","code":"Command$clone(deep = FALSE)"},{"path":"https://wanglabcsu.github.io/blit/reference/Command.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class to prepare command parameters. — Command","text":"deep Whether make deep clone.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/allele_counter.html","id":null,"dir":"Reference","previous_headings":"","what":"Run alleleCount — allele_counter","title":"Run alleleCount — allele_counter","text":"alleleCount program primarily exists prevent code duplication projects, specifically AscatNGS Battenberg.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/allele_counter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run alleleCount — allele_counter","text":"","code":"allele_counter(   hts_file,   loci_file,   ofile,   ...,   odir = getwd(),   alleleCounter = NULL )"},{"path":"https://wanglabcsu.github.io/blit/reference/allele_counter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run alleleCount — allele_counter","text":"hts_file string path sample HTS file. loci_file string path loci file. ofile string path output file. ... <dynamic dots> Additional arguments passed alleleCounter command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(alleleCounter()). odir string path output directory. alleleCounter string path alleleCounter command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/allele_counter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run alleleCount — allele_counter","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/appmamba.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage Environment with micromamba — appmamba","title":"Manage Environment with micromamba — appmamba","text":"Manage Environment micromamba","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/appmamba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage Environment with micromamba — appmamba","text":"","code":"appmamba(...)  install_appmamba(force = FALSE)  uninstall_appmamba()  appmamba_rc(edit = FALSE)"},{"path":"https://wanglabcsu.github.io/blit/reference/appmamba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage Environment with micromamba — appmamba","text":"... <dynamic dots> Additional arguments passed micromamba. Run appmamba() details. force logical value indicating whether reinstall appmamba already installed. edit logical value indicating whether open config file editing.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/appmamba.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Manage Environment with micromamba — appmamba","text":"appmamba(): blit utilizes micromamba manage environments. function simply executes specified micromamba command. install_appmamba(): Install appmamba (micromamba). uninstall_appmamba(): Remove appmamba (micromamba). appmamba_rc(): Get run commands config file micromamba.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/appmamba.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage Environment with micromamba — appmamba","text":"","code":"# \\donttest{ install_appmamba() #> Installing appmamba #> Downloading from https://micro.mamba.pm/api/micromamba/linux-64/latest #> Install appmamba successfully! appmamba() #> Running command (2025-09-19 12:45:49): #> /home/runner/.local/share/R/blit/apps/appmamba/bin/micromamba --root-prefix #> /home/runner/.local/share/R/blit/appmamba --help #>  appmamba(\"env\", \"list\") #> Running command (2025-09-19 12:45:49): #> /home/runner/.local/share/R/blit/apps/appmamba/bin/micromamba --root-prefix #> /home/runner/.local/share/R/blit/appmamba env list #>  # uninstall_appmamba() # Uninstall the `micromamba` # }"},{"path":"https://wanglabcsu.github.io/blit/reference/arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Deliver arguments of command — arg","title":"Deliver arguments of command — arg","text":"arg() intended user use, arg0() developers perform argument validation.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deliver arguments of command — arg","text":"","code":"arg(tag, value, indicator = FALSE, lgl2int = FALSE, format = \"%s\", sep = \" \")  arg0(   tag,   value,   indicator = FALSE,   lgl2int = FALSE,   format = \"%s\",   sep = \" \",   allow_null = FALSE,   arg = caller_arg(value),   call = caller_call() )"},{"path":"https://wanglabcsu.github.io/blit/reference/arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deliver arguments of command — arg","text":"tag string specifying argument tag, like \"-\", \"-o\". value Value passed argument. indicator logical value specifying whether value indicator tag. TRUE, logical value explain set unset tag. lgl2int logical value indicates whether transfrom value TRUE 1 FALSE 0. TRUE, format always set \"%d\". format format value, details see sprintf. sep character string used separate \"tag\" \"value\", usually \" \" \"=\". allow_null single logical value indicates whether value can NULL. arg argument name string. argument mentioned error messages input origin problem. call execution environment currently running function.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deliver arguments of command — arg","text":"string.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bcftools.html","id":null,"dir":"Reference","previous_headings":"","what":"BCFtools is a program for variant calling and manipulating files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. — bcftools","title":"BCFtools is a program for variant calling and manipulating files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. — bcftools","text":"BCFtools program variant calling manipulating files Variant Call Format (VCF) binary counterpart BCF. commands work transparently VCFs BCFs, uncompressed BGZF-compressed.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bcftools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCFtools is a program for variant calling and manipulating files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. — bcftools","text":"","code":"bcftools(subcmd = NULL, ..., bcftools = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/bcftools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BCFtools is a program for variant calling and manipulating files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. — bcftools","text":"subcmd Sub-Command bcftools. Details see: cmd_help(bcftools()). ... <dynamic dots> Additional arguments passed bcftools command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(bcftools()). bcftools string path bcftools command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bcftools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BCFtools is a program for variant calling and manipulating files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. — bcftools","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/bedtools.html","id":null,"dir":"Reference","previous_headings":"","what":"Run bedtools — bedtools","title":"Run bedtools — bedtools","text":"bedtools powerful toolset genome arithmetic.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bedtools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run bedtools — bedtools","text":"","code":"bedtools(subcmd = NULL, ..., bedtools = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/bedtools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run bedtools — bedtools","text":"subcmd Sub-Command bedtools. Details see: cmd_help(bedtools()). ... <dynamic dots> Additional arguments passed bedtools command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(bedtools()). bedtools string path bedtools command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bedtools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run bedtools — bedtools","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/blit-package.html","id":null,"dir":"Reference","previous_headings":"","what":"blit: Bioinformatics Library for Integrated Tools — blit-package","title":"blit: Bioinformatics Library for Integrated Tools — blit-package","text":"-encompassing R toolkit designed streamline process calling various bioinformatics software performing data analysis visualization R. 'blit', users can easily integrate wide array bioinformatics command line tools workflows, leveraging power R sophisticated data manipulation graphical representation.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/blit-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"blit: Bioinformatics Library for Integrated Tools — blit-package","text":"Maintainer: Yun Peng yunyunp96@163.com (ORCID) Authors: Shixiang Wang w_shixiang@163.com (ORCID) contributors: Jia Ding jiading682@qq.com (ORCID) [contributor] Jennifer Lu jennifer.lu717@gmail.com (Author included scripts Kraken2 KrakenTools libraries) [copyright holder] Li Song Li.Song@dartmouth.edu (Author included scripts TRUST4 library) [copyright holder] X. Shirley Liu xsliu@ds.dfci.harvard.edu (Author included scripts TRUST4 library) [copyright holder]","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bowtie2.html","id":null,"dir":"Reference","previous_headings":"","what":"Run bowtie2 — bowtie2","title":"Run bowtie2 — bowtie2","text":"Bowtie 2 ultrafast memory-efficient tool aligning sequencing reads long reference sequences. particularly good aligning reads 50 100s 1,000s characters, particularly good aligning relatively long (e.g. mammalian) genomes. Bowtie 2 indexes genome FM Index keep memory footprint small: human genome, memory footprint typically around 3.2 GB. Bowtie 2 supports gapped, local, paired-end alignment modes.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bowtie2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run bowtie2 — bowtie2","text":"","code":"bowtie2(index, reads, ofile, ..., bowtie2 = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/bowtie2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run bowtie2 — bowtie2","text":"index Path bowtie2 index prefix (without file extensions). reads character vector FASTQ files used input bowtie2. ofile string path output sam file. ... <dynamic dots> Additional arguments passed bowtie2 command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(bowtie2()). bowtie2 string path bowtie2 command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bowtie2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run bowtie2 — bowtie2","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/bwa.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BWA — bwa","title":"Run BWA — bwa","text":"BWA software package aligns low-divergence sequences large reference genome, human genome","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bwa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BWA — bwa","text":"","code":"bwa(subcmd = NULL, ..., bwa = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/bwa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BWA — bwa","text":"subcmd Sub-Command BWA (e.g., \"index\", \"mem\"). ... <dynamic dots> Additional arguments passed bwa command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(bwa()). bwa string path bwa command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/bwa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BWA — bwa","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/bwa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BWA — bwa","text":"","code":"if (FALSE) { # \\dontrun{ # Index reference genome bwa(\"index\", \"-a\", \"bwtsw\", \"reference.fa\") |>   cmd_run()  # Paired-end sequence alignment bwa(\"mem\", \"-t\", \"4\", \"reference.fa\", \"read1.fq\", \"read2.fq\") |>   cmd_run(stdout = \"output.sam\")  # Single-end alignment (generate sai file) bwa(\"aln\", \"-t\", \"4\", \"reference.fa\", \"read.fq\") |>   cmd_run(stdout = \"read.sai\") } # }"},{"path":"https://wanglabcsu.github.io/blit/reference/cellranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Run cellranger — cellranger","title":"Run cellranger — cellranger","text":"Run cellranger","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cellranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run cellranger — cellranger","text":"","code":"cellranger(subcmd = NULL, ..., cellranger = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/cellranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run cellranger — cellranger","text":"subcmd Sub-Command cellranger. ... <dynamic dots> Additional arguments passed cellranger command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(cellranger()). cellranger string path cellranger command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cellranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run cellranger — cellranger","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/cellranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run cellranger — cellranger","text":"","code":"if (FALSE) { # \\dontrun{ fastq_dir  # 10x raw fastq files directory genome_ref # Please download the transcriptome reference data cellranger(     \"count\",     sprintf(\"--fastqs=%s\", fastq_dir),     sprintf(\"--id=%s\", basename(fastq_dir)),     sprintf(\"--sample=%s\", basename(fastq_dir)),     sprintf(\"--localcores=%s\", parallel::detectCores()),     sprintf(\"--transcriptome=%s\", genome_ref),     sprintf(\"--chemistry=%s\", shQuote(\"auto\")),     \"--nosecondary\" ) } # }"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_conda.html","id":null,"dir":"Reference","previous_headings":"","what":"Set conda-like environment prefix to the PATH environment variables — cmd_conda","title":"Set conda-like environment prefix to the PATH environment variables — cmd_conda","text":"Set conda-like environment prefix PATH environment variables.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_conda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set conda-like environment prefix to the PATH environment variables — cmd_conda","text":"","code":"cmd_conda(...)"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_conda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set conda-like environment prefix to the PATH environment variables — cmd_conda","text":"... Additional arguments passed cmd_condaenv().","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_on_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Schedule expressions to run — cmd_on_start","title":"Schedule expressions to run — cmd_on_start","text":"Schedule expressions run","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_on_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schedule expressions to run — cmd_on_start","text":"","code":"cmd_on_start(command, ...)  cmd_on_exit(command, ...)  cmd_on_fail(command, ...)  cmd_on_succeed(command, ...)"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_on_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schedule expressions to run — cmd_on_start","text":"command command object. ... expressions input captured enquos(). expressions depend global data, may want unquote objects !! prevent unintended changes due delayed evaluation. cmd_on_start: Expression evaluated command started. cmd_on_exit: Expression evaluated command finished. cmd_on_fail: Expression evaluated command failed. cmd_on_succeed: Expression evaluated command succeeded.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_on_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Schedule expressions to run — cmd_on_start","text":"cmd_on_start: command object , start code updated. cmd_on_exit: command object , exit code updated. cmd_on_fail: command object , failure code updated. cmd_on_succeed: command object , successful code updated.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_on_start.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Schedule expressions to run — cmd_on_start","text":"cmd_on_start(): define startup code command cmd_on_exit(): define exit code command cmd_on_fail(): define failure code command cmd_on_succeed(): define successful code command","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a list of commands — cmd_parallel","title":"Execute a list of commands — cmd_parallel","text":"Execute list commands","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a list of commands — cmd_parallel","text":"","code":"cmd_parallel(   ...,   stdouts = FALSE,   stderrs = FALSE,   stdins = NULL,   stdout_callbacks = NULL,   stderr_callbacks = NULL,   timeouts = NULL,   threads = NULL,   verbose = TRUE )"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a list of commands — cmd_parallel","text":"... list command object. stdouts, stderrs Specifies output/error streams child process handled. One list following values: FALSE/NULL: Suppresses output/error stream. TRUE: Prints child process output/error R console. standard output/error stream exists, \"\" used; otherwise, \"|\" used. string: empty string \"\" inherits standard output/error stream main R process (Printing R console). main R process lacks standard output/error stream, RGui Windows, error thrown. string \"|\" prints standard output connection R process (Using cat()). Alternative, file name path redirect output/error. relative path specified, remains relative current working directory, even different directory set using cmd_wd(). connection: writable R connection object. connection open(), automatically opened. stderrs, use string \"2>&1\" redirect connection (.e.  pipe file) stdout. single file path specified, stdout/stderr commands merged single file. stdins input diverted? One list following values: FALSE/NULL: standard input. TRUE: standard input stream exists, \"\" used; otherwise, NULL used. string: empty string \"\" inherits standard input stream main R process. main R process lacks standard input stream, RGui Windows, error thrown. Alternative, file name path redirect input. relative path specified, remains relative current working directory, even different directory set using cmd_wd(). stdout_callbacks, stderr_callbacks One list following values: NULL: callback function. function: function invoked line standard output error. Non-text (non-character) output ignored. function accept two arguments: one standard output error another running process object. timeouts Timeout seconds. Can single value list, specifying maximum elapsed time running command separate process. threads Number threads use. verbose single boolean value indicating whether command execution verbose.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a list of commands — cmd_parallel","text":"list exit status invisiblely.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute command — cmd_run","title":"Execute command — cmd_run","text":"cmd_run: Run command. cmd_help: Print help document command. cmd_background: Run command background. function provided completeness. Instead using function, recommend using cmd_parallel(), can run multiple commands background ensuring processes properly cleaned process exits.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute command — cmd_run","text":"","code":"cmd_run(   command,   stdout = TRUE,   stderr = TRUE,   stdin = TRUE,   stdout_callback = NULL,   stderr_callback = NULL,   timeout = NULL,   spinner = FALSE,   verbose = TRUE )  cmd_help(   command,   stdout = TRUE,   stderr = TRUE,   stdout_callback = NULL,   stderr_callback = NULL,   verbose = TRUE )  cmd_background(   command,   stdout = FALSE,   stderr = FALSE,   stdin = NULL,   verbose = TRUE )"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute command — cmd_run","text":"command command object. stdout, stderr Specifies output/error streams child process handled. Possible values include: FALSE/NULL: Suppresses output/error stream. TRUE: Prints child process output/error R console. standard output/error stream exists, \"\" used; otherwise, \"|\" used. string: empty string \"\" inherits standard output/error stream main R process (Printing R console). main R process lacks standard output/error stream, RGui Windows, error thrown. string \"|\" prints standard output connection R process (Using cat()). Alternative, file name path redirect output/error. relative path specified, remains relative current working directory, even different directory set using cmd_wd(). connection: writable R connection object. connection open(), automatically opened. stderr, use string \"2>&1\" redirect connection (.e. pipe file) stdout. cmd_help(), use FALSE/NULL nothing, since always want display help document. cmd_background(), connection used, TRUE \"|\" fallback empty string \"\". using connection (already open) string, wrapping () prevents overwriting existing content. stdin input diverted? Possible values include: FALSE/NULL: standard input. TRUE: standard input stream exists, \"\" used; otherwise, NULL used. string: empty string \"\" inherits standard input stream main R process. main R process lacks standard input stream, RGui Windows, error thrown. Alternative, file name path redirect input. relative path specified, remains relative current working directory, even different directory set using cmd_wd(). stdout_callback, stderr_callback Possible values include: NULL: callback function. function: function invoked line standard output error. Non-text (non-character) output ignored. function accept two arguments: one standard output error another running process object. timeout Timeout seconds. limit elapsed time running command separate process. spinner Whether show reassuring spinner process running. verbose single boolean value indicating whether command execution verbose.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute command — cmd_run","text":"cmd_run: Exit status invisiblely. cmd_help: input command invisiblely. cmd_background: process object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the context for the command — cmd_wd","title":"Setup the context for the command — cmd_wd","text":"Setup context command","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the context for the command — cmd_wd","text":"","code":"cmd_wd(command, wd = NULL)  cmd_envvar(command, ..., action = \"replace\", sep = NULL)  cmd_envpath(command, ..., action = \"prefix\", name = \"PATH\")  cmd_condaenv(command, ..., root = NULL, action = \"prefix\")"},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the context for the command — cmd_wd","text":"command command object. wd string NULL define working directory command. ... <dynamic dots>: cmd_envvar: Named character define environment variables. cmd_envpath: Unnamed character define PATH-like environment variables name. cmd_condaenv: Unnamed character specify name conda environment. action new values \"replace\", \"prefix\" \"suffix\" existing environment variables? sep string separate new old value action \"prefix\" \"suffix\". default, \" \" used. name string define PATH environment variable name. can use define PATH-like environment variable PYTHONPATH. root string specifying path conda root prefix. provided, function searches root following order: option blit.conda.root. environment variable BLIT_CONDA_ROOT. root prefix appmamba().","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the context for the command — cmd_wd","text":"cmd_wd: command object , working directory updated. cmd_envvar: command object , running environment variable updated. cmd_envpath: command object , running environment variable specified name updated. cmd_condaenv: command object , running environment variable PATH updated.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/cmd_wd.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Setup the context for the command — cmd_wd","text":"cmd_wd(): define working directory. cmd_envvar(): define environment variables. cmd_envpath(): define PATH-like environment variables. cmd_condaenv(): Set conda-like environment prefix PATH environment variables.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/conda.html","id":null,"dir":"Reference","previous_headings":"","what":"Run conda — conda","title":"Run conda — conda","text":"Run conda","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/conda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run conda — conda","text":"","code":"conda(subcmd = NULL, ..., conda = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/conda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run conda — conda","text":"subcmd Sub-Command conda. ... <dynamic dots> Additional arguments passed conda command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(conda()). conda string path conda command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/conda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run conda — conda","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Invoke a System Command — exec","title":"Invoke a System Command — exec","text":"Invoke System Command","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invoke a System Command — exec","text":"","code":"exec(cmd, ...)"},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invoke a System Command — exec","text":"cmd Command invoked, character string. ... <dynamic dots> Additional arguments passed cmd command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote().","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invoke a System Command — exec","text":"command object.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":"command-collections","dir":"Reference","previous_headings":"","what":"command collections","title":"Invoke a System Command — exec","text":"allele_counter() bcftools() bedtools() bowtie2() bwa() cellranger() conda() fastp() fastq_pair() gistic2() kraken_tools() kraken2() perl() pyscenic() python() samtools() seqkit() snpEff() trust4() varscan()","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/exec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invoke a System Command — exec","text":"","code":"cmd_run(exec(\"echo\", \"$PATH\")) #> Running command (2025-09-19 12:45:52): echo $PATH #>  #> Running scheduled exit task #> Command process finished #> System command succeed"},{"path":"https://wanglabcsu.github.io/blit/reference/fastp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run fastp — fastp","title":"Run fastp — fastp","text":"fastp tool designed provide ultrafast --one preprocessing quality control FastQ data.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/fastp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run fastp — fastp","text":"","code":"fastp(fq1, ofile1, ..., fq2 = NULL, ofile2 = NULL, fastp = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/fastp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run fastp — fastp","text":"fq1, fq2 string fastq file path. ofile1, ofile2 string path output fastq file. ... <dynamic dots> Additional arguments passed fastp command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(fastp()). fastp string path fastp command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/fastp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run fastp — fastp","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/fastq_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"FASTQ PAIR — fastq_pair","title":"FASTQ PAIR — fastq_pair","text":"Rewrite paired end fastq files make sure reads mate separate singletons. Usually get paired end read files two files /1 sequence one /2 sequence (/f /r just two reads ID). However, often working files third party source (e.g. SRA) different numbers reads file (reads fail QC). Spades, bowtie2 tools break demand paired end files number reads.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/fastq_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FASTQ PAIR — fastq_pair","text":"","code":"fastq_pair(   fq1,   fq2,   ...,   hash_table_size = NULL,   max_hash_table_size = NULL,   fastq_pair = NULL )  fastq_read_pair(fastq_files)"},{"path":"https://wanglabcsu.github.io/blit/reference/fastq_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FASTQ PAIR — fastq_pair","text":"fq1, fq2 string fastq file path. ... <dynamic dots> Additional arguments passed fastq_pair command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(fastq_pair()). hash_table_size Size hash table use. max_hash_table_size Maximal hash table size use. fastq_pair string path fastq_pair command. fastq_files character fastq file paths.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/fastq_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FASTQ PAIR — fastq_pair","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/gistic2.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GISTIC2 — gistic2","title":"Run GISTIC2 — gistic2","text":"GISTIC module identifies regions genome significantly amplified deleted across set samples. aberration assigned G-score considers amplitude aberration well frequency occurrence across samples. False Discovery Rate q-values calculated aberrant regions, regions q-values user-defined threshold considered significant. significant region, \"peak region\" identified, part aberrant region greatest amplitude frequency alteration. addition, \"wide peak\" determined using leave-one-algorithm allow errors boundaries single sample. \"wide peak\" boundaries robust identifying likely gene targets region. significantly aberrant region also tested determine whether results primarily broad events (longer half chromosome arm), focal events, significant levels . GISTIC module reports genomic locations calculated q-values aberrant regions. identifies samples exhibit significant amplification deletion, lists genes found \"wide peak\" region.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/gistic2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GISTIC2 — gistic2","text":"","code":"gistic2(seg, refgene, ..., odir = getwd(), gistic2 = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/gistic2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GISTIC2 — gistic2","text":"seg data.frame segmented data. refgene Path reference genome data input file (REQUIRED, see file description). ... <dynamic dots> Additional arguments passed gistic2 command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(gistic2()). odir string path output directory. gistic2 string path gistic2 command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/gistic2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GISTIC2 — gistic2","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/kraken2.html","id":null,"dir":"Reference","previous_headings":"","what":"Running Kraken2 — kraken2","title":"Running Kraken2 — kraken2","text":"Kraken taxonomic sequence classifier assigns taxonomic labels DNA sequences. Kraken examines k-mers within query sequence uses information within k-mers query database. database maps k-mers lowest common ancestor (LCA) genomes known contain given k-mer.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/kraken2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running Kraken2 — kraken2","text":"","code":"kraken2(   reads,   ...,   ofile = \"kraken_output.txt\",   report = \"kraken_report.txt\",   classified_out = NULL,   unclassified_out = NULL,   odir = getwd(),   kraken2 = NULL )"},{"path":"https://wanglabcsu.github.io/blit/reference/kraken2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running Kraken2 — kraken2","text":"reads character vector FASTQ files used input Kraken2. Can one file (single-end) two files (paired-end). ... <dynamic dots> Additional arguments passed kraken2 command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(kraken2()). ofile string path save kraken2 output. report string path save kraken2 report. classified_out string path save classified sequences, fastq file. unclassified_out string path save unclassified sequences, fastq file. odir string path output directory. kraken2 string path kraken2 command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/kraken2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running Kraken2 — kraken2","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/kraken_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"KrakenTools is a suite of scripts to be used alongside the Kraken, KrakenUniq, Kraken 2, or Bracken programs. — kraken_tools","title":"KrakenTools is a suite of scripts to be used alongside the Kraken, KrakenUniq, Kraken 2, or Bracken programs. — kraken_tools","text":"scripts designed help Kraken users downstream analysis Kraken results.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/kraken_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KrakenTools is a suite of scripts to be used alongside the Kraken, KrakenUniq, Kraken 2, or Bracken programs. — kraken_tools","text":"","code":"kraken_tools(script, ..., python = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/kraken_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KrakenTools is a suite of scripts to be used alongside the Kraken, KrakenUniq, Kraken 2, or Bracken programs. — kraken_tools","text":"script Name kraken2 script. One \"combine_kreports\", \"combine_mpa\", \"extract_kraken_reads\", \"filter_bracken_out\", \"fix_unmapped\", \"kreport2krona\", \"kreport2mpa\", \"make_kreport\", \"make_ktaxonomy\". ... <dynamic dots> Additional arguments passed kraken_tools command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(kraken_tools()). python string path python command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/kraken_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KrakenTools is a suite of scripts to be used alongside the Kraken, KrakenUniq, Kraken 2, or Bracken programs. — kraken_tools","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/make_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to create new command. — make_command","title":"Helper function to create new command. — make_command","text":"make_command helper function used developers create function new Command object. used end users.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/make_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to create new command. — make_command","text":"","code":"make_command(name, fun, envir = parent.frame())"},{"path":"https://wanglabcsu.github.io/blit/reference/make_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to create new command. — make_command","text":"name string function name. fun function used initialize Command object. envir environment used bind created function.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/make_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to create new command. — make_command","text":"function.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/perl.html","id":null,"dir":"Reference","previous_headings":"","what":"Perl is a highly capable, feature-rich programming language with over 36 years of development. — perl","title":"Perl is a highly capable, feature-rich programming language with over 36 years of development. — perl","text":"Perl highly capable, feature-rich programming language 36 years development.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/perl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perl is a highly capable, feature-rich programming language with over 36 years of development. — perl","text":"","code":"perl(..., perl = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/perl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perl is a highly capable, feature-rich programming language with over 36 years of development. — perl","text":"... <dynamic dots> Additional arguments passed perl command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(perl()). perl string path perl command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/perl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perl is a highly capable, feature-rich programming language with over 36 years of development. — perl","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/pyscenic.html","id":null,"dir":"Reference","previous_headings":"","what":"Run pyscenic — pyscenic","title":"Run pyscenic — pyscenic","text":"Run pyscenic","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/pyscenic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run pyscenic — pyscenic","text":"","code":"pyscenic(subcmd = NULL, ..., pyscenic = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/pyscenic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run pyscenic — pyscenic","text":"subcmd Sub-Command pyscenic. ... <dynamic dots> Additional arguments passed pyscenic subcmd command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(pyscenic subcmd()). pyscenic string path pyscenic command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/pyscenic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run pyscenic — pyscenic","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/python.html","id":null,"dir":"Reference","previous_headings":"","what":"Python is a programming language that lets you work quickly and integrate systems more effectively. — python","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — python","text":"Python programming language lets work quickly integrate systems effectively.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — python","text":"","code":"python(..., python = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — python","text":"... <dynamic dots> Additional arguments passed python command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(python()). python string path python command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/python.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — python","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/samtools.html","id":null,"dir":"Reference","previous_headings":"","what":"Python is a programming language that lets you work quickly and integrate systems more effectively. — samtools","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — samtools","text":"Python programming language lets work quickly integrate systems effectively.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/samtools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — samtools","text":"","code":"samtools(subcmd = NULL, ..., samtools = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/samtools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — samtools","text":"subcmd Sub-Command samtools. Details see: cmd_help(samtools()). ... <dynamic dots> Additional arguments passed samtools command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(samtools()). samtools string path samtools command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/samtools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python is a programming language that lets you work quickly and integrate systems more effectively. — samtools","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/seqkit.html","id":null,"dir":"Reference","previous_headings":"","what":"Run seqkit — seqkit","title":"Run seqkit — seqkit","text":"Run seqkit","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/seqkit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run seqkit — seqkit","text":"","code":"seqkit(subcmd = NULL, ..., seqkit = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/seqkit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run seqkit — seqkit","text":"subcmd Sub-Command seqkit. ... <dynamic dots> Additional arguments passed seqkit subcmd command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(seqkit subcmd()). seqkit string path seqkit command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/seqkit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run seqkit — seqkit","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/snpEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes). — snpEff","title":"Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes). — snpEff","text":"Genetic variant annotation, functional effect prediction toolbox. annotates predicts effects genetic variants genes proteins (amino acid changes).","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/snpEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes). — snpEff","text":"","code":"snpEff(subcmd = NULL, ..., snpEff = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/snpEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes). — snpEff","text":"subcmd Sub-Command snpEff. Details see: cmd_help(snpEff()). ... <dynamic dots> Additional arguments passed snpEff command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(snpEff()). snpEff string path snpEff command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/snpEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genetic variant annotation, and functional effect prediction toolbox. It annotates and predicts the effects of genetic variants on genes and proteins (such as amino acid changes). — snpEff","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/trust4.html","id":null,"dir":"Reference","previous_headings":"","what":"TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data — trust4","title":"TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data — trust4","text":"TRUST4: immune repertoire reconstruction bulk single-cell RNA-seq data","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/trust4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data — trust4","text":"","code":"trust4(   file1,   ref_coordinate,   ...,   file2 = NULL,   mode = NULL,   ref_annot = NULL,   ofile = NULL,   odir = getwd(),   trust4 = NULL )  trust4_imgt_annot(   species = \"Homo_sapien\",   ...,   ofile = \"IMGT+C.fa\",   odir = getwd(),   perl = NULL )  trust4_gene_names(imgt_annot, ofile = \"bcr_tcr_gene_name.txt\", odir = getwd())"},{"path":"https://wanglabcsu.github.io/blit/reference/trust4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data — trust4","text":"file1 Path bam file fastq file. ref_coordinate Path fasta file coordinate sequence V/D/J/C genes. ... trust4: <dynamic dots> Additional arguments passed run-trust4 command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(run-trust4()). trust4_imgt_annot: <dynamic dots> Additional arguments passed trust4_imgt_annot command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(trust4_imgt_annot()). file2 Path second paired-end read fastq file, used mode = \"fastq\". mode One \"bam\" \"fastq\". NULL, inferred file1. ref_annot Path detailed V/D/J/C gene reference file, IMGT database. (default: used). (recommended). ofile trust4: Prefix output files. (default: inferred file prefix). trust4_imgt_annot: Output file name. trust4_gene_names: Output file name. odir string path output directory. trust4 string path run-trust4 command. species Species extract IMGT annotation, details see https://www.imgt.org//download/V-QUEST/IMGT_V-QUEST_reference_directory/. perl string path perl command. imgt_annot Path IMGT annotation file, created via trust4_imgt_annot.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/trust4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data — trust4","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/reference/varscan.html","id":null,"dir":"Reference","previous_headings":"","what":"VarScan is a platform-independent software tool developed at the Genome Institute at Washington University to detect variants in NGS data. — varscan","title":"VarScan is a platform-independent software tool developed at the Genome Institute at Washington University to detect variants in NGS data. — varscan","text":"VarScan platform-independent software tool developed Genome Institute Washington University detect variants NGS data.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/varscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VarScan is a platform-independent software tool developed at the Genome Institute at Washington University to detect variants in NGS data. — varscan","text":"","code":"varscan(subcmd = NULL, ..., varscan = NULL)"},{"path":"https://wanglabcsu.github.io/blit/reference/varscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VarScan is a platform-independent software tool developed at the Genome Institute at Washington University to detect variants in NGS data. — varscan","text":"subcmd Sub-Command varscan. Details see: cmd_help(varscan()). ... <dynamic dots> Additional arguments passed varscan command. Empty arguments automatically trimmed. single argument, file path, contains spaces, must quoted, example using shQuote(). Details see: cmd_help(varscan()). varscan string path varscan command.","code":""},{"path":"https://wanglabcsu.github.io/blit/reference/varscan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VarScan is a platform-independent software tool developed at the Genome Institute at Washington University to detect variants in NGS data. — varscan","text":"command object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/blit/news/index.html","id":"blit-development-version","dir":"Changelog","previous_headings":"","what":"blit (development version)","title":"blit (development version)","text":"Rename cmd_conda cmd_codnaenv(). new command fastp new command varscan new command bcftools new command snpEff new command bowtie2","code":""},{"path":"https://wanglabcsu.github.io/blit/news/index.html","id":"blit-020","dir":"Changelog","previous_headings":"","what":"blit 0.2.0","title":"blit 0.2.0","text":"CRAN release: 2025-03-29","code":""},{"path":"https://wanglabcsu.github.io/blit/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"blit 0.2.0","text":"new function cmd_conda define PATH environment variables conda environment. new function appmamba install software manage Environment micromamba. new function cmd_on_fail define expression evaluated command failed. new function cmd_on_succeedto define expression evaluated command succeeded. new function cmd_on_start() define expressions run command started new function cmd_on_exit() define expressions run command finished new command samtools new function cmd_parallel() run multiple commands meanwhile use processx package execute command remove sys withr package dependencies","code":""},{"path":"https://wanglabcsu.github.io/blit/news/index.html","id":"blit-010","dir":"Changelog","previous_headings":"","what":"blit 0.1.0","title":"blit 0.1.0","text":"CRAN release: 2025-02-27 Initial CRAN submission.","code":""}]
